{"ast":null,"code":"import { userService } from '../../helpers/authservice/user.service';\nimport router from '../../router/index'; //const user = JSON.parse(localStorage.getItem('user'));\n//export const state = user ? { status: { loggeduser: true }, user } : { status: {}, user: null };\n\nexport var actions = {\n  // Logs in the user.\n  // eslint-disable-next-line no-unused-vars\n  loginF: function loginF(_ref, _ref2) {\n    var dispatch = _ref.dispatch,\n        commit = _ref.commit;\n    var login = _ref2.login,\n        password = _ref2.password;\n    commit('loginRequest', {\n      login: login\n    });\n    userService.login(login, password).then(function (user) {\n      commit('loginSuccess', user);\n      router.push('/');\n    }, function (error) {\n      commit('loginFailure', error);\n      dispatch('notification/error', error, {\n        root: true\n      });\n    });\n  },\n  // Logout the user\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit;\n    userService.logout();\n    commit('logout');\n  },\n  // register the user\n  registeruser: function registeruser(_ref4, user) {\n    var dispatch = _ref4.dispatch,\n        commit = _ref4.commit;\n    commit('registerRequest', user);\n    userService.register(user).then(function (user) {\n      commit('registerSuccess', user);\n      dispatch('notification/success', 'Registration successful', {\n        root: true\n      });\n      router.push('/login');\n    }, function (error) {\n      commit('registerFailure', error);\n      dispatch('notification/error', error, {\n        root: true\n      });\n    });\n  }\n};\nexport var mutations = {\n  loginRequest: function loginRequest(state, user) {\n    state.status = {\n      loggingIn: true\n    };\n    state.user = user;\n  },\n  loginSuccess: function loginSuccess(state, user) {\n    state.status = {\n      loggeduser: true\n    };\n    state.user = user;\n  },\n  loginFailure: function loginFailure(state) {\n    state.status = {};\n    state.user = null;\n  },\n  logout: function logout(state) {\n    state.status = {};\n    state.user = null;\n  },\n  registerRequest: function registerRequest(state) {\n    state.status = {\n      registering: true\n    };\n  },\n  registerSuccess: function registerSuccess(state) {\n    state.status = {};\n  },\n  registerFailure: function registerFailure(state) {\n    state.status = {};\n  }\n};","map":{"version":3,"sources":["C:/Projects/success/project_v.1.0.0/src/state/modules/authfack.js"],"names":["userService","router","actions","loginF","dispatch","commit","login","password","then","user","push","error","root","logout","registeruser","register","mutations","loginRequest","state","status","loggingIn","loginSuccess","loggeduser","loginFailure","registerRequest","registering","registerSuccess","registerFailure"],"mappings":"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","sourcesContent":["import { userService } from '../../helpers/authservice/user.service';\r\nimport router from '../../router/index'\r\n\r\n//const user = JSON.parse(localStorage.getItem('user'));\r\n//export const state = user ? { status: { loggeduser: true }, user } : { status: {}, user: null };\r\n\r\nexport const actions = {\r\n    // Logs in the user.\r\n    // eslint-disable-next-line no-unused-vars\r\n    loginF({ dispatch, commit }, { login, password }) {\r\n        commit('loginRequest', { login });\r\n\r\n        userService.login(login, password)\r\n            .then(\r\n                user => {\r\n                    commit('loginSuccess', user);\r\n                    router.push('/');\r\n\r\n                },\r\n                error => {\r\n                    commit('loginFailure', error);\r\n                    dispatch('notification/error', error, { root: true });\r\n                }\r\n            );\r\n    },\r\n    // Logout the user\r\n    logout({ commit }) {\r\n        userService.logout();\r\n        commit('logout');\r\n    },\r\n    // register the user\r\n    registeruser({ dispatch, commit }, user) {\r\n        commit('registerRequest', user);\r\n        userService.register(user)\r\n            .then(\r\n                user => {\r\n                    commit('registerSuccess', user);\r\n                    dispatch('notification/success', 'Registration successful', { root: true });\r\n                    router.push('/login');\r\n                },\r\n                error => {\r\n                    commit('registerFailure', error);\r\n                    dispatch('notification/error', error, { root: true });\r\n                }\r\n            );\r\n    }\r\n};\r\n\r\nexport const mutations = {\r\n    loginRequest(state, user) {\r\n        state.status = { loggingIn: true };\r\n        state.user = user;\r\n    },\r\n    loginSuccess(state, user) {\r\n        state.status = { loggeduser: true };\r\n        state.user = user;\r\n    },\r\n    loginFailure(state) {\r\n        state.status = {};\r\n        state.user = null;\r\n    },\r\n    logout(state) {\r\n        state.status = {};\r\n        state.user = null;\r\n    },\r\n    registerRequest(state) {\r\n        state.status = { registering: true };\r\n    },\r\n    registerSuccess(state) {\r\n        state.status = {};\r\n    },\r\n    registerFailure(state) {\r\n        state.status = {};\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}