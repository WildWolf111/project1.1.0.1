{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { authHeader } from './auth-header';\nimport axios from 'axios';\nexport var userService = {\n  login: login,\n  logout: logout,\n  register: register,\n  getAll: getAll\n};\n\nfunction login(email, password) {\n  console.log(data); //ссылочный тип переменной data//\n\n  var data = {\n    login_user: email,\n    password_user: password\n  };\n  return axios.post('/api/v2/users/auth', data).then(function (handleResponse) {\n    console.log(handleResponse.data);\n    console.log(handleResponse.data.message);\n\n    if (handleResponse.data.message != '') {\n      var responseJson = {\n        email: email,\n        password: password,\n        token: handleResponse.data.message\n      };\n      console.log(responseJson);\n      localStorage.setItem('user', JSON.stringify(responseJson));\n      console.log(localStorage);\n      return responseJson;\n    }\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction register(user) {\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(\"/users/register\", requestOptions).then(handleResponse);\n}\n\nfunction getAll() {\n  var requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(\"/users\", requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text(text).then(function (text) {\n    console.log(text);\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["C:/Projects/success/project_v.1.0.0/src/helpers/authservice/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","email","password","console","log","data","login_user","password_user","post","then","handleResponse","message","responseJson","token","localStorage","setItem","JSON","stringify","removeItem","user","requestOptions","method","headers","body","fetch","response","text","parse","ok","status","location","reload","error","statusText","Promise","reject"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,KAAK,EAALA,KADuB;AAEvBC,EAAAA,MAAM,EAANA,MAFuB;AAGvBC,EAAAA,QAAQ,EAARA,QAHuB;AAIvBC,EAAAA,MAAM,EAANA;AAJuB,CAApB;;AAOP,SAASH,KAAT,CAAeI,KAAf,EAAsBC,QAAtB,EAAgC;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ,EAD4B,CAExB;;AACJ,MAAIA,IAAI,GAAG;AACPC,IAAAA,UAAU,EAAEL,KADL;AAEPM,IAAAA,aAAa,EAAEL;AAFR,GAAX;AASA,SAAOP,KAAK,CAACa,IAAN,CAAW,oBAAX,EAAiCH,IAAjC,EACFI,IADE,CACG,UAAAC,cAAc,EAAI;AACpBP,IAAAA,OAAO,CAACC,GAAR,CAAYM,cAAc,CAACL,IAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYM,cAAc,CAACL,IAAf,CAAoBM,OAAhC;;AACA,QAAID,cAAc,CAACL,IAAf,CAAoBM,OAApB,IAA+B,EAAnC,EAAuC;AACnC,UAAIC,YAAY,GAAG;AACfX,QAAAA,KAAK,EAALA,KADe;AAEfC,QAAAA,QAAQ,EAARA,QAFe;AAGfW,QAAAA,KAAK,EAAEH,cAAc,CAACL,IAAf,CAAoBM;AAHZ,OAAnB;AASAR,MAAAA,OAAO,CAACC,GAAR,CAAYQ,YAAZ;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeL,YAAf,CAA7B;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYU,YAAZ;AAEA,aAAOF,YAAP;AAEH;AAEJ,GAtBE,CAAP;AAwBH;;AAGD,SAASd,MAAT,GAAkB;AACd;AACAgB,EAAAA,YAAY,CAACI,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASnB,QAAT,CAAkBoB,IAAlB,EAAwB;AACpB,MAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEP,IAAI,CAACC,SAAL,CAAeE,IAAf;AAHa,GAAvB;AAKA,SAAOK,KAAK,oBAAoBJ,cAApB,CAAL,CAAyCX,IAAzC,CAA8CC,cAA9C,CAAP;AACH;;AAED,SAASV,MAAT,GAAkB;AACd,MAAMoB,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE5B,UAAU;AAFA,GAAvB;AAIA,SAAO8B,KAAK,WAAWJ,cAAX,CAAL,CAAgCX,IAAhC,CAAqCC,cAArC,CAAP;AACH;;AAGD,SAASA,cAAT,CAAwBe,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,CAAcA,IAAd,EAAoBjB,IAApB,CAAyB,UAAAiB,IAAI,EAAI;AACpCvB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,IAAZ;AACA,QAAMrB,IAAI,GAAGqB,IAAI,IAAIV,IAAI,CAACW,KAAL,CAAWD,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACG,EAAd,EAAkB;AACd,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACA/B,QAAAA,MAAM;AACNgC,QAAAA,QAAQ,CAACC,MAAT,CAAgB,IAAhB;AACH;;AACD,UAAMC,KAAK,GAAI3B,IAAI,IAAIA,IAAI,CAACM,OAAd,IAA0Bc,QAAQ,CAACQ,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACH;;AACD,WAAO3B,IAAP;AACH,GAbM,CAAP;AAcH","sourcesContent":["import { authHeader } from './auth-header';\r\nimport axios from 'axios'\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n};\r\n\r\nfunction login(email, password) {\r\n    console.log(data)\r\n        //ссылочный тип переменной data//\r\n    let data = {\r\n        login_user: email,\r\n        password_user: password,\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    return axios.post('/api/v2/users/auth', data)\r\n        .then(handleResponse => {\r\n            console.log(handleResponse.data)\r\n            console.log(handleResponse.data.message)\r\n            if (handleResponse.data.message != '') {\r\n                let responseJson = {\r\n                    email,\r\n                    password,\r\n                    token: handleResponse.data.message\r\n\r\n\r\n\r\n                };\r\n\r\n                console.log(responseJson)\r\n                localStorage.setItem('user', JSON.stringify(responseJson));\r\n                console.log(localStorage)\r\n\r\n                return responseJson;\r\n\r\n            }\r\n\r\n        });\r\n\r\n}\r\n\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n    return fetch(`/users/register`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n    return fetch(`/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\n\r\nfunction handleResponse(response) {\r\n    return response.text(text).then(text => {\r\n        console.log(text)\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                location.reload(true);\r\n            }\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}