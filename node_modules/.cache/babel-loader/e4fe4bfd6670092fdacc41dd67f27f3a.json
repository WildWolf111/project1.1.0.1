{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { authHeader } from './auth-header';\nimport axios from 'axios';\nexport var userService = {\n  login: login,\n  logout: logout,\n  register: register,\n  getAll: getAll\n};\n\nfunction login(email, password) {\n  //ссылочный тип переменной data//\n  var data = {\n    login: email,\n    password: password\n  };\n  console.log(data);\n  return axios.post('/api/v2/users/auth', data).then(function (handleResponse) {\n    console.log(handleResponse);\n    console.log(handleResponse.data.message);\n\n    if (handleResponse.data.message != '') {\n      var responseJson = {\n        login: handleResponse.data.User.login,\n        role: handleResponse.data.User.Role,\n        token: handleResponse.data.Token\n      };\n      console.log(responseJson);\n      localStorage.setItem('user', JSON.stringify(responseJson));\n      return responseJson;\n    }\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction register(user) {\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(\"/users/register\", requestOptions).then(handleResponse);\n}\n\nfunction getAll() {\n  var requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(\"/users\", requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text(text).then(function (text) {\n    console.log(text);\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["C:/Users/Max/Desktop/project1.0.0-main/src/helpers/authservice/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","email","password","data","console","log","post","then","handleResponse","message","responseJson","User","role","Role","token","Token","localStorage","setItem","JSON","stringify","removeItem","user","requestOptions","method","headers","body","fetch","response","text","parse","ok","status","location","reload","error","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader } from './auth-header';\nimport axios from 'axios'\n\nexport const userService = {\n    login,\n    logout,\n    register,\n    getAll,\n};\n\nfunction login(email, password) {\n\n    //ссылочный тип переменной data//\n    let data = {\n        login: email,\n        password: password,\n\n\n\n\n    };\n    console.log(data)\n\n\n\n    return axios.post('/api/v2/users/auth', data)\n        .then(handleResponse => {\n            console.log(handleResponse)\n            console.log(handleResponse.data.message)\n            if (handleResponse.data.message != '') {\n                let responseJson = {\n\n                    login: handleResponse.data.User.login,\n                    role: handleResponse.data.User.Role,\n                    token: handleResponse.data.Token,\n\n\n\n\n                };\n\n\n                console.log(responseJson)\n                localStorage.setItem('user', JSON.stringify(responseJson));\n\n\n                return responseJson;\n\n            }\n\n\n\n\n\n\n\n        });\n\n\n}\n\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction register(user) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(user)\n    };\n    return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction getAll() {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n    return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\n\nfunction handleResponse(response) {\n    return response.text(text).then(text => {\n        console.log(text)\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                location.reload(true);\n            }\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}