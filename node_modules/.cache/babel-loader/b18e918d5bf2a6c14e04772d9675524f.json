{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Layout from \"../../layouts/main.vue\";\nimport PageHeader from \"@/components/page-header\";\nimport appConfig from \"../../../app.config\";\nimport GTDDataService from \"/src/services/GTDDataService\";\nimport CountryDataService from \"/src/services/CountryDataService\";\nimport Select2 from 'vue3-select2-component';\nexport default {\n  page: {\n    title: \"Basic Elements\",\n    meta: [{\n      name: \"description\",\n      content: appConfig.description\n    }]\n  },\n  data: function data() {\n    return {\n      PageRequest: {\n        Fields: [{\n          Name: '',\n          Value: '',\n          Operation: '',\n          Order: ''\n        }],\n        PageNumber: 0,\n        PageLenght: 0,\n        TotalRecords: 0,\n        TotalPage: 0\n      },\n      page: 1,\n      perPage: 7,\n      pages: [],\n      jsonPages: {\n        PageNumber: 0,\n        TotalRecords: 0\n      },\n      jsonFields: [{\n        name: '',\n        value: ''\n      }],\n      search: \"\",\n      GTD: {\n        id: -1,\n        NumId: \"\",\n        Country: {\n          id: -1,\n          name: \"\"\n        }\n      },\n      message: '',\n      Countries: [{\n        id: -1,\n        name: \"\"\n      }]\n    };\n  },\n  components: {\n    Layout: Layout,\n    PageHeader: PageHeader,\n    Select2: Select2\n  },\n  methods: {\n    getGTD: function getGTD(id) {\n      var _this = this;\n\n      GTDDataService.get(id).then(function (response) {\n        console.log(response.data);\n\n        if (response.status == 200) {\n          _this.GTD = response.data;\n        } else {\n          _this.$router.push({\n            path: \"/GTDs\"\n          });\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    updateGTD: function updateGTD() {\n      var _this2 = this;\n\n      this.GTD.Country.Id = parseInt(this.GTD.Country.Id);\n      GTDDataService.update(this.GTD.id, this.GTD).then(function (response) {\n        _this2.message = 'The GTD was updated successfully!';\n\n        if (response.data.status_code == 200) {\n          _this2.$router.push({\n            path: \"/GTDs\"\n          });\n        } else {\n          return response.data.message;\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    deleteGTD: function deleteGTD() {\n      var _this3 = this;\n\n      GTDDataService.delete(this.GTD.Id).then(function (response) {\n        _this3.$router.push({\n          name: \"GTD\"\n        });\n\n        if (response.status == 202) {\n          _this3.$router.push({\n            path: \"/GTDs\"\n          });\n        } else {\n          return response.data.message;\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    retrieveCountries: function retrieveCountries() {\n      var _this4 = this;\n\n      this.jsonPages = {\n        pg_number: 1,\n        pg_length: 1000\n      };\n\n      if (this.search != \"\") {\n        this.jsonFields = [{\n          field: \"name\",\n          value: this.search\n        }];\n      } else {\n        this.jsonFields = [];\n      }\n\n      CountryDataService.getAll(this.jsonPages).then(function (response) {\n        var i = 0;\n\n        for (i = 0; i < response.data.pg_length; i++) {\n          var currentCountry = response.data.List[i];\n          _this4.Countries[i] = {\n            id: currentCountry.id,\n            text: currentCountry.name\n          };\n        }\n\n        console.log(response.data.List);\n      }).catch(function (e) {\n        console.log(e);\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.message = '';\n    this.getGTD(this.$route.params.id);\n    this.retrieveCountries();\n  }\n};","map":{"version":3,"mappings":"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","names":["Layout","PageHeader","appConfig","GTDDataService","CountryDataService","Select2","page","title","meta","name","content","description","data","PageRequest","Fields","Name","Value","Operation","Order","PageNumber","PageLenght","TotalRecords","TotalPage","perPage","pages","jsonPages","jsonFields","value","search","GTD","id","NumId","Country","message","Countries","components","methods","getGTD","get","then","console","log","response","status","$router","push","path","catch","e","updateGTD","Id","parseInt","update","status_code","deleteGTD","delete","retrieveCountries","pg_number","pg_length","field","getAll","i","currentCountry","List","text","mounted","$route","params"],"sourceRoot":"","sources":["C:\\Users\\Max\\Desktop\\project1.0.0-main\\src\\views\\GTDs\\edit.vue"],"sourcesContent":["<script>\nimport Layout from \"../../layouts/main.vue\";\nimport PageHeader from \"@/components/page-header\";\nimport appConfig from \"../../../app.config\";\nimport GTDDataService from \"/src/services/GTDDataService\";\nimport CountryDataService from \"/src/services/CountryDataService\";\nimport Select2 from 'vue3-select2-component';\n\nexport default {\n  \n  page: {\n    title: \"Basic Elements\",\n    meta: [{ name: \"description\", content: appConfig.description }],\n  },\n  data() {\n   return {\n    PageRequest: {\n                        Fields: [{\n                        Name :'',\n                        Value:'',\n                        Operation:'',\n                        Order:'',\n                        }],\n                        PageNumber:0,\n                        PageLenght:0,\n                        TotalRecords:0,\n                        TotalPage:0,\n                    },\n                page: 1,\n                perPage: 7,\n                pages: [],\n                jsonPages: {\n                            PageNumber: 0,\n                            TotalRecords:0,\n                },\n                jsonFields: [{\n                            name:'',\n                            value: ''\n                }],\n\n                search:\"\",\n\n\n      GTD:{\n          id:-1,\n          NumId:\"\",\n         Country:{\n            id:-1,\n            name:\"\"\n         },\n      },\n      message: '',\n      Countries:[{\n        id:-1,\n        name:\"\"\n      }]\n    };\n    \n  },\n  components: {\n    Layout,\n    PageHeader,\n    Select2\n  },\n    methods: {\n    getGTD(id) {\n       \n       GTDDataService.get(id)\n        .then(response => {\n         \n            console.log(response.data)\n            if (response.status == 200){\n              this.GTD = response.data;\n            }else{\n              this.$router.push({path: \"/GTDs\"});\n              \n            }\n          \n        })\n        .catch(e => {\n          console.log(e);\n        });\n    },\n\n    updateGTD() {\n        \n        this.GTD.Country.Id = parseInt(this.GTD.Country.Id);\n       GTDDataService.update(this.GTD.id, this.GTD)\n       \n        .then(response => {\n         \n          this.message = 'The GTD was updated successfully!';\n        if (response.data.status_code == 200){\n        this.$router.push({path: \"/GTDs\"})}\n        else{\n        return response.data.message}\n        })\n        \n        .catch(e => {\n          console.log(e);\n        });\n        \n    },\n\n    deleteGTD() {\n      \n      GTDDataService.delete(this.GTD.Id)\n        .then(response => {\n         \n          this.$router.push({ name: \"GTD\" });\n        if (response.status == 202){\n        this.$router.push({path: \"/GTDs\"})}\n        else{\n        return response.data.message}\n        \n        })\n        .catch(e => {\n          console.log(e);\n        });\n        \n    },\n    \n       retrieveCountries(){\n        \n      this. jsonPages = {\n               pg_number:1,\n                  pg_length: 1000\n            };\n         \n            if (this.search!=\"\"){\n            this.jsonFields = [{\n                field:\"name\",\n                value: this.search\n            }];\n            }else{\n                this.jsonFields = [];\n            }\n\n\n       CountryDataService.getAll(this.jsonPages)\n       .then(response => {\n     \n         \n     let i=0;\n      for(i=0; i<response.data.pg_length;i++){\n           let currentCountry = response.data.List[i];\n          \n           this.Countries[i]={\n    \n            id:currentCountry.id,\n            text:currentCountry.name  \n\n          };\n      }\n\nconsole.log(response.data.List)\n     \n    })\n    .catch(e => {\n      console.log(e);\n    });\n},\n\n  },\n  mounted() {\n    this.message = '';\n    \n    this.getGTD(this.$route.params.id);\n     this.retrieveCountries();\n     \n    \n  }\n\n    \n};\n</script>\n\n<template>\n  <Layout>\n    <PageHeader :title=\"title\" :items=\"items\" />\n    \n     <div class=\"row\">\n          <div>\n              <label for=\"labelInput\" class=\"form-label\">{{ $t(\"t-name\") }}</label>\n             <input type=\"text\" class=\"form-control\" id=\"labelInput\" required  v-model.number=\"GTD.num_id\" >\n          </div>                     \n     </div> \n\n  \n\n                <div class=\"col-xxl-3 col-md-6\">\n                    <label for=\"exampleDataList\" class=\"form-label\">{{ $t(\"t-countries\") }}</label>\n                    <Select2 v-model.number=\"GTD.Country.id\" :options=\"this.Countries\" />\n                </div>\n\n      \n<p>\n \n    </p>\n  \n    \n            <div class=\"row\">\n                <div>\n                    <b-button @click=\"updateGTD\" variant=\"success\" class=\"waves-effect waves-light\" >{{ $t(\"t-Save\") }}</b-button> \n                              \n                </div> \n            </div>\n\n\n\n\n    </Layout>\n</template>\n"]},"metadata":{},"sourceType":"module"}