{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Max/Desktop/project1.0.0-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.map.js\";\n// array in local storage for registered users\nvar users = JSON.parse(localStorage.getItem('users')) || [{\n  username: \"admin\",\n  email: \"admin@themesbrand.com\",\n  password: \"123456\"\n}];\nexport function configureFakeBackend() {\n  var realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          // get parameters from post request\n          var params = JSON.parse(opts.body); // find if any user matches login credentials\n\n          var filteredUsers = users.filter(function (user) {\n            return user.email === params.email && user.password === params.password;\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            var user = filteredUsers[0];\n            var responseJson = {\n              id: user.id,\n              username: user.username,\n              name: user.name,\n              email: user.email,\n              token: 'fake-jwt-token'\n            };\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(responseJson));\n              }\n            });\n          } else {\n            // else return error\n            reject('These credentials do not match our records.');\n          }\n\n          return;\n        } // get users\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(users));\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n\n          return;\n        } // get user by id\n\n\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n            // find user by id in users array\n            var urlParts = url.split('/');\n            var id = parseInt(urlParts[urlParts.length - 1]);\n            var matchedUsers = users.filter(function (user) {\n              return user.id === id;\n            });\n\n            var _user = matchedUsers.length ? matchedUsers[0] : null; // respond 200 OK with user\n\n\n            resolve({\n              ok: true,\n              text: function text() {\n                return JSON.stringify(_user);\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n\n          return;\n        } // register user\n\n\n        if (url.endsWith('/users/register') && opts.method === 'POST') {\n          // get new user object from post body\n          var newUser = JSON.parse(opts.body); // validation\n\n          var duplicateUser = users.filter(function (user) {\n            return user.username === newUser.username;\n          }).length;\n\n          if (duplicateUser) {\n            reject(\"Username '\" + newUser.username + \"' is already taken\");\n            return;\n          } // save new user\n\n\n          newUser.id = users.length ? Math.max.apply(Math, _toConsumableArray(users.map(function (user) {\n            return user.id;\n          }))) + 1 : 1;\n          users.push(newUser);\n          localStorage.setItem('users', JSON.stringify(users)); // respond 200 OK\n\n          resolve({\n            ok: true,\n            text: function text() {\n              return Promise.resolve();\n            }\n          });\n          return;\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Max/Desktop/project1.0.0-main/src/helpers/fake-backend.js"],"names":["users","JSON","parse","localStorage","getItem","username","email","password","configureFakeBackend","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","body","filteredUsers","filter","user","length","responseJson","id","name","token","ok","text","stringify","headers","Authorization","match","urlParts","split","parseInt","matchedUsers","newUser","duplicateUser","Math","max","map","push","setItem","then","response"],"mappings":"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","sourcesContent":["// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users'))\n    || [{ username: \"admin\", email: \"admin@themesbrand.com\", password: \"123456\" }];\n\nexport function configureFakeBackend() {\n\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {\n\n                // authenticate\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.email === params.email && user.password === params.password;\n                    });\n\n                    if (filteredUsers.length) {\n                        // if login details are valid return user details and fake jwt token\n                        let user = filteredUsers[0];\n                        let responseJson = {\n                            id: user.id,\n                            username: user.username,\n                            name: user.name,\n                            email: user.email,\n                            token: 'fake-jwt-token'\n                        };\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) });\n                    } else {\n                        // else return error\n                        reject('These credentials do not match our records.');\n                    }\n\n                    return;\n                }\n\n                // get users\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(users)) });\n                    } else {\n                        // return 401 not authorised if token is null or invalid\n                        reject('Unauthorised');\n                    }\n\n                    return;\n                }\n\n                // get user by id\n                if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n                    // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n                        // find user by id in users array\n                        let urlParts = url.split('/');\n                        let id = parseInt(urlParts[urlParts.length - 1]);\n                        let matchedUsers = users.filter(user => { return user.id === id; });\n                        let user = matchedUsers.length ? matchedUsers[0] : null;\n\n                        // respond 200 OK with user\n                        resolve({ ok: true, text: () => JSON.stringify(user) });\n                    } else {\n                        // return 401 not authorised if token is null or invalid\n                        reject('Unauthorised');\n                    }\n\n                    return;\n                }\n\n                // register user\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\n                    // get new user object from post body\n                    let newUser = JSON.parse(opts.body);\n                    // validation\n                    let duplicateUser = users.filter(user => { return user.username === newUser.username; }).length;\n                    if (duplicateUser) {\n                        reject(\"Username '\" + newUser.username + \"' is already taken\");\n                        return;\n                    }\n\n                    // save new user\n                    newUser.id = users.length ? Math.max(...users.map(user => user.id)) + 1 : 1;\n                    users.push(newUser);\n                    localStorage.setItem('users', JSON.stringify(users));\n\n                    // respond 200 OK\n                    resolve({ ok: true, text: () => Promise.resolve() });\n\n                    return;\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n\n            }, 500);\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}