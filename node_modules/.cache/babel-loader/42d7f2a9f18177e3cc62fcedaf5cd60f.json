{"ast":null,"code":"import { userService } from '../../helpers/authservice/user.service';\nimport router from '../../router/index';\nvar user = JSON.parse(localStorage.getItem('user'));\nexport var state = user ? {\n  status: {\n    loggeduser: true\n  },\n  user: user\n} : {\n  status: {},\n  user: null\n};\nexport var actions = {\n  // Logs in the user.\n  // eslint-disable-next-line no-unused-vars\n  loginF: function loginF(_ref, _ref2) {\n    var dispatch = _ref.dispatch,\n        commit = _ref.commit;\n    var login = _ref2.login,\n        password = _ref2.password;\n    commit('loginRequest', {\n      login: login\n    });\n    userService.login(login, password).then(function (user) {\n      commit('loginSuccess', user);\n      router.push('/');\n    }).catch(function (err) {\n      if (err.response) {\n        console.log(err.response.message = '111111111111'); // client received an error response (5xx, 4xx)\n      } else if (err.request) {// client never received a response, or request never left \n      } else {// anything else \n      }\n\n      commit('loginFailure', err);\n      dispatch('notification/error', err, {\n        root: true\n      });\n    });\n  },\n  // Logout the user\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit;\n    userService.logout();\n    commit('logout');\n  },\n  // register the user\n  registeruser: function registeruser(_ref4, user) {\n    var dispatch = _ref4.dispatch,\n        commit = _ref4.commit;\n    commit('registerRequest', user);\n    userService.register(user).then(function (user) {\n      commit('registerSuccess', user);\n      router.push('/login');\n    }, function (error) {\n      commit('registerFailure', error);\n      dispatch('notification/error', error, {\n        root: true\n      });\n    });\n  }\n};\nexport var mutations = {\n  loginRequest: function loginRequest(state, user) {\n    state.status = {\n      loggingIn: true\n    };\n    state.user = user;\n  },\n  loginSuccess: function loginSuccess(state, user) {\n    state.status = {\n      loggeduser: true\n    };\n    state.user = user;\n  },\n  loginFailure: function loginFailure(state) {\n    state.status = {\n      loggeduser: false\n    };\n    state.user = null;\n  },\n  logout: function logout(state) {\n    state.status = {};\n    state.user = null;\n  },\n  registerRequest: function registerRequest(state) {\n    state.status = {\n      registering: true\n    };\n  },\n  registerSuccess: function registerSuccess(state) {\n    state.status = {};\n  },\n  registerFailure: function registerFailure(state) {\n    state.status = {};\n  }\n};","map":{"version":3,"sources":["C:/Projects/success/project_v.1.0.0/src/state/modules/authfack.js"],"names":["userService","router","user","JSON","parse","localStorage","getItem","state","status","loggeduser","actions","loginF","dispatch","commit","login","password","then","push","catch","err","response","console","log","message","request","root","logout","registeruser","register","error","mutations","loginRequest","loggingIn","loginSuccess","loginFailure","registerRequest","registering","registerSuccess","registerFailure"],"mappings":"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","sourcesContent":["import { userService } from '../../helpers/authservice/user.service';\r\nimport router from '../../router/index'\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\n\r\nexport const state = user ? { status: { loggeduser: true }, user } : { status: {}, user: null };\r\n\r\nexport const actions = {\r\n    // Logs in the user.\r\n    // eslint-disable-next-line no-unused-vars\r\n    loginF({ dispatch, commit }, { login, password }) {\r\n        commit('loginRequest', { login });\r\n\r\n        userService.login(login, password)\r\n            .then(\r\n                user => {\r\n                    commit('loginSuccess', user);\r\n                    router.push('/');\r\n\r\n\r\n                }\r\n            ).catch(err => {\r\n                if (err.response) {\r\n                    console.log(err.response.message = '111111111111');\r\n                    // client received an error response (5xx, 4xx)\r\n                } else if (err.request) {\r\n                    // client never received a response, or request never left \r\n                } else {\r\n                    // anything else \r\n                }\r\n                commit('loginFailure', err);\r\n                dispatch('notification/error', err, { root: true });\r\n            });\r\n    },\r\n    // Logout the user\r\n    logout({ commit }) {\r\n        userService.logout();\r\n        commit('logout');\r\n    },\r\n    // register the user\r\n    registeruser({ dispatch, commit }, user) {\r\n        commit('registerRequest', user);\r\n        userService.register(user)\r\n            .then(\r\n                user => {\r\n                    commit('registerSuccess', user);\r\n\r\n                    router.push('/login');\r\n                },\r\n                error => {\r\n                    commit('registerFailure', error);\r\n                    dispatch('notification/error', error, { root: true });\r\n                }\r\n            );\r\n    }\r\n};\r\n\r\nexport const mutations = {\r\n    loginRequest(state, user) {\r\n        state.status = { loggingIn: true };\r\n        state.user = user;\r\n    },\r\n    loginSuccess(state, user) {\r\n        state.status = { loggeduser: true };\r\n        state.user = user;\r\n    },\r\n    loginFailure(state) {\r\n        state.status = { loggeduser: false };\r\n        state.user = null;\r\n    },\r\n    logout(state) {\r\n        state.status = {};\r\n        state.user = null;\r\n    },\r\n    registerRequest(state) {\r\n        state.status = { registering: true };\r\n    },\r\n    registerSuccess(state) {\r\n        state.status = {};\r\n    },\r\n    registerFailure(state) {\r\n        state.status = {};\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}