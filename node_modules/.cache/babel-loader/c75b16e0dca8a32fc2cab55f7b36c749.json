{"ast":null,"code":"import { userService } from '../../helpers/authservice/user.service';\nimport router from '../../router/index';\nvar user = JSON.parse(localStorage.getItem('user'));\nexport var state = user ? {\n  status: {\n    loggeduser: true\n  },\n  user: user\n} : {\n  status: {},\n  user: null\n};\nexport var actions = {\n  // Logs in the user.\n  // eslint-disable-next-line no-unused-vars\n  login: function login(_ref, _ref2) {\n    var dispatch = _ref.dispatch,\n        commit = _ref.commit;\n    var email = _ref2.email,\n        password = _ref2.password;\n    commit('loginRequest', {\n      email: email\n    });\n    userService.login(email, password).then(function (user) {\n      commit('loginSuccess', user);\n      router.push('/');\n    }, function (error) {\n      commit('loginFailure', error);\n      dispatch('notification/error', error, {\n        root: true\n      });\n    });\n  },\n  // Logout the user\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit;\n    userService.logout();\n    commit('logout');\n  },\n  // register the user\n  registeruser: function registeruser(_ref4, user) {\n    var dispatch = _ref4.dispatch,\n        commit = _ref4.commit;\n    commit('registerRequest', user);\n    userService.register(user).then(function (user) {\n      commit('registerSuccess', user);\n      dispatch('notification/success', 'Registration successful', {\n        root: true\n      });\n      router.push('/login');\n    }, function (error) {\n      commit('registerFailure', error);\n      dispatch('notification/error', error, {\n        root: true\n      });\n    });\n  }\n};\nexport var mutations = {\n  loginRequest: function loginRequest(state, user) {\n    state.status = {\n      loggingIn: true\n    };\n    state.user = user;\n  },\n  loginSuccess: function loginSuccess(state, user) {\n    state.status = {\n      loggeduser: true\n    };\n    state.user = user;\n  },\n  loginFailure: function loginFailure(state) {\n    state.status = {};\n    state.user = null;\n  },\n  logout: function logout(state) {\n    state.status = {};\n    state.user = null;\n  },\n  registerRequest: function registerRequest(state) {\n    state.status = {\n      registering: true\n    };\n  },\n  registerSuccess: function registerSuccess(state) {\n    state.status = {};\n  },\n  registerFailure: function registerFailure(state) {\n    state.status = {};\n  }\n};","map":{"version":3,"sources":["C:/Projects/success/project_v.1.0.0/src/state/modules/authfack.js"],"names":["userService","router","user","JSON","parse","localStorage","getItem","state","status","loggeduser","actions","login","dispatch","commit","email","password","then","push","error","root","logout","registeruser","register","mutations","loginRequest","loggingIn","loginSuccess","loginFailure","registerRequest","registering","registerSuccess","registerFailure"],"mappings":"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","sourcesContent":["import { userService } from '../../helpers/authservice/user.service';\r\nimport router from '../../router/index'\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\nexport const state = user ? { status: { loggeduser: true }, user } : { status: {}, user: null };\r\n\r\nexport const actions = {\r\n    // Logs in the user.\r\n    // eslint-disable-next-line no-unused-vars\r\n    login({ dispatch, commit }, { email, password }) {\r\n\r\n        commit('loginRequest', { email });\r\n\r\n        userService.login(email, password)\r\n            .then(\r\n                user => {\r\n                    commit('loginSuccess', user);\r\n                    router.push('/');\r\n                },\r\n                error => {\r\n                    commit('loginFailure', error);\r\n                    dispatch('notification/error', error, { root: true });\r\n                }\r\n            );\r\n    },\r\n    // Logout the user\r\n    logout({ commit }) {\r\n        userService.logout();\r\n        commit('logout');\r\n    },\r\n    // register the user\r\n    registeruser({ dispatch, commit }, user) {\r\n        commit('registerRequest', user);\r\n        userService.register(user)\r\n            .then(\r\n                user => {\r\n                    commit('registerSuccess', user);\r\n                    dispatch('notification/success', 'Registration successful', { root: true });\r\n                    router.push('/login');\r\n                },\r\n                error => {\r\n                    commit('registerFailure', error);\r\n                    dispatch('notification/error', error, { root: true });\r\n                }\r\n            );\r\n    }\r\n};\r\n\r\nexport const mutations = {\r\n    loginRequest(state, user) {\r\n        state.status = { loggingIn: true };\r\n        state.user = user;\r\n    },\r\n    loginSuccess(state, user) {\r\n        state.status = { loggeduser: true };\r\n        state.user = user;\r\n    },\r\n    loginFailure(state) {\r\n        state.status = {};\r\n        state.user = null;\r\n    },\r\n    logout(state) {\r\n        state.status = {};\r\n        state.user = null;\r\n    },\r\n    registerRequest(state) {\r\n        state.status = { registering: true };\r\n    },\r\n    registerSuccess(state) {\r\n        state.status = {};\r\n    },\r\n    registerFailure(state) {\r\n        state.status = {};\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}