{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport Layout from \"../../../layouts/main.vue\";\nimport PageHeader from \"@/components/page-header\";\nimport appConfig from \"../../../../app.config\";\nimport Select2 from 'vue3-select2-component';\nexport default {\n  page: {\n    title: \"Basic Elements\",\n    meta: [{\n      name: \"description\",\n      content: appConfig.description\n    }]\n  },\n  data: function data() {\n    return {\n      title: \"Добавление нового документа\",\n      Product: {\n        id: '',\n        name: \"\",\n        slug: \"\",\n        SKU: \"\",\n        short_description: \"\",\n        full_description: \"\",\n        Brand: {\n          id: -1\n        },\n        sort: 0\n      },\n      Brands: [{\n        id: -1,\n        text: \"\"\n      }],\n      jsonPages: {\n        currentpage: 1,\n        countsrecordonpage: 100\n      },\n      jsonFields: [{\n        name: '',\n        value: ''\n      }]\n    };\n  },\n  components: {\n    Layout: Layout,\n    PageHeader: PageHeader,\n    Select2: Select2\n  },\n  methods: {\n    addedProduct: function addedProduct() {\n      var _this = this;\n\n      var data = {\n        \"name\": this.Product.name,\n        \"slug\": this.Product.slug,\n        \"SKU\": this.Product.SKU,\n        \"short_description\": this.Product.short_description,\n        \"full_description\": this.Product.full_description,\n        \"Brand\": {\n          \"id\": parseInt(this.Product.Brand.id)\n        },\n        \"sort\": this.Product.sort\n      };\n      console.log(data);\n      ProductDataService.create(data).then(function (response) {\n        _this.Product.id = response.data.id;\n        console.log(response.data);\n        _this.submitted = true;\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    newCompany: function newCompany() {\n      this.submitted = false;\n      this.Product = {};\n    },\n    retrieveBrands: function retrieveBrands() {\n      var _this2 = this;\n\n      this.jsonPages = {\n        currentpage: 1,\n        countsrecordonpage: 1000\n      };\n\n      if (this.search != \"\") {\n        this.jsonFields = [{\n          field: \"name\",\n          value: this.search\n        }];\n      } else {\n        this.jsonFields = [];\n      }\n\n      BrandsDataService.getAll(this.jsonFields, [], this.jsonPages).then(function (response) {\n        for (var i = 0; i < response.data.Brands.length; i++) {\n          var currentBrand = response.data.Brands[i];\n          _this2.Brands[i] = {\n            id: currentBrand.Id,\n            text: currentBrand.Name\n          };\n        } //this.Brands = response.data.Brands;\n\n\n        console.log(_this2.Brands);\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    DynamicTable: function (_DynamicTable) {\n      function DynamicTable(_x, _x2, _x3) {\n        return _DynamicTable.apply(this, arguments);\n      }\n\n      DynamicTable.toString = function () {\n        return _DynamicTable.toString();\n      };\n\n      return DynamicTable;\n    }(function (GLOB, htmlTable, config) {\n      // Так как эта функция является конструктором,\n      // подразумевается, что ключевое слово this - будет\n      // указывать на экземнпляр созданного объекта. Т.е. \n      // вызывать её нужно с оператором \"new\".\n      // Проверка ниже является страховкой: \n      // если эта функция была вызвана без оператора \"new\",\n      // то здесь эта досадная ситуация исправляется:\n      if (!(this instanceof DynamicTable)) {\n        return new DynamicTable(GLOB, htmlTable, config);\n      } // Зависимость:\n\n\n      var DOC = GLOB.document,\n          // Ссылка на массив строк таблицы:\n      tableRows = htmlTable.rows,\n          // Кол-во строк таблицы:\n      RLength = tableRows.length,\n          // Кол-во ячеек в таблице:\n      CLength = tableRows[0].cells.length,\n          // Контейнер для работы в циклах ниже:\n      inElement = null,\n          // Контейнер кнопки\n      button = null,\n          // Контейнер текстового узла кнопки\n      butText = null,\n          // В одном из методов ниже, потребуется\n      // сохранить контекст:\n      self = this,\n          // Счётчики итераций:\n      i,\n          j; // Метод \"Вставить кнопки\". \n      // Создаёт/добавляет две кнопки \"удалить\" и \"добавить\"\n      // завёрнутые в элемент \"P\". Используются DOM - методы создания \n      // и добавления элементов.\n\n      this.insertButtons = function () {\n        // Создаём первую кнопку:\n        inElement = DOC.createElement(\"P\");\n        inElement.className = \"d-butts\";\n        button = DOC.createElement(\"BUTTON\");\n        button.onclick = this.delRow;\n        butText = DOC.createTextNode(\"-\");\n        button.appendChild(butText); // Добавляем её в DOM:      \n\n        inElement.appendChild(button); // Создаём вторую кнопку:\n\n        button = DOC.createElement(\"BUTTON\");\n        button.onclick = this.addRow;\n        butText = DOC.createTextNode(\"+\");\n        button.appendChild(butText); // Добавляем её в DOM:      \n\n        inElement.appendChild(button); // Обнуляем переменную, т.к. \n        // она используется и в других методах.\n\n        return inElement;\n      }; // Метод \"Добавить строку\"\n\n\n      this.addRow = function (ev) {\n        // Кросс бр. получаем событие и цель (кнопку)\n        var e = ev || GLOB.event,\n            target = e.target || e.srcElement,\n            // Получаем ссылку на строку, в которой была кнопка:\n        row = target.parentNode.parentNode.parentNode,\n            // Получаем кол-во ячеек в строке:\n        cellCount = row.cells.length,\n            // Получаем индекс строки в которой была кнопка + 1,\n        // что бы добавить строку сразу после той, в которой\n        // была нажата кнопка:\n        index = row.rowIndex + 1,\n            i; // Вставляем строку:\n\n        htmlTable.insertRow(index); // В этом цикле, вставляем ячейки.\n\n        for (i = 0; i < cellCount; i += 1) {\n          htmlTable.rows[index].insertCell(i); // Если ячейка последняя...\n\n          if (i == cellCount - 1) {\n            // Получаем в переменную кнопки, используя метод, описанный выше:\n            inElement = self.insertButtons();\n          } else {\n            // Иначе получаем в переменную текстовое поле:      \n            inElement = DOC.createElement(\"INPUT\"); // ... и задаём ему имя, типа name[] - которое\n            // впоследствии станет массивом.\n\n            inElement.name = config[i + 1] + \"[]\";\n          } // Добавляем в DOM, то что получили в переменную:\n\n\n          htmlTable.rows[index].cells[i].appendChild(inElement);\n        } // Обнуляем переменную, т.к. \n        // она используется и в других методах.\n\n\n        inElement = null; // Во избежании ненужных действий, при нажатии на кнопку\n        // возвращаем false:\n\n        return false;\n      }; // Метод \"Удалить строку\"\n      // Удаляем строку, на  кнопку, которой нажали:\n\n\n      this.delRow = function (ev) {\n        // Страховка: не даёт удалить строку, если она осталась\n        // последней. Цифра 2 здесь потому, что мы считаем так же\n        // строку с заголовками TH. Итого получается, что 1 строка\n        // с заголовками и 1 строка - с содержимым.\n        if (tableRows.length > 2) {\n          htmlTable.deleteRow(this.parentNode.parentNode.parentNode.rowIndex);\n        } else {\n          return false;\n        }\n      }; // Фактически, ниже это инициализация таблицы:\n      // Содержимое ячеек помещается внутрь текстовых\n      // полей, а в последнюю ячейку кажой строки, помещаются\n      // нопки \"удалить\" и \"добавить\" Функция является\n      // \"вызываемой немедленно\"\n\n\n      return function () {\n        // Мы имеем дело с двумерным массивом: \n        // table.rows[...].cells[...]\n        // Поэетому сдесь вложенный цикл.\n        // Внешний цикл \"шагает\" по строкам...\n        for (i = 1; i < RLength; i += 1) {\n          // Внутренний цикл \"шагает\" по ячейкам: \n          for (j = 0; j < CLength; j += 1) {\n            // Если ячейка последняя...\n            if (j + 1 == CLength) {\n              // Помещаем в переменную кнопки:\n              inElement = self.insertButtons();\n            } else {\n              // Иначе создаем текстовый элемент,\n              inElement = DOC.createElement(\"INPUT\"); // Помещаем в него данные ячейки,\n\n              inElement.value = tableRows[i].cells[j].firstChild.data; // Присваиваем имя - массив,\n\n              inElement.name = config[j + 1] + \"[]\"; // Удаляем, уже не нужный экземпляр данных непосредственно\n              // из самой ячейки, потому что теперь данные у нас внутри\n              // текстового поля:\n\n              tableRows[i].cells[j].firstChild.data = \"\";\n            } // Вставляем в ячейку содержимое переменной - это\n            // либо текстовое поле, либо кнопки: \n\n\n            tableRows[i].cells[j].appendChild(inElement); // Обнуляем переменную, т.к. \n            // она используется и в других методах.\n\n            inElement = null;\n          }\n        }\n      }();\n    }),\n    mounted: function mounted() {\n      this.retrieveBrands();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["Layout","PageHeader","appConfig","Select2","page","title","meta","name","content","description","data","Product","id","slug","SKU","short_description","full_description","Brand","sort","Brands","text","jsonPages","currentpage","countsrecordonpage","jsonFields","value","components","methods","addedProduct","parseInt","console","log","ProductDataService","create","then","response","submitted","catch","e","newCompany","retrieveBrands","search","field","BrandsDataService","getAll","i","length","currentBrand","Id","Name","DynamicTable","GLOB","htmlTable","config","DOC","document","tableRows","rows","RLength","CLength","cells","inElement","button","butText","self","j","insertButtons","createElement","className","onclick","delRow","createTextNode","appendChild","addRow","ev","event","target","srcElement","row","parentNode","cellCount","index","rowIndex","insertRow","insertCell","deleteRow","firstChild","mounted"],"sourceRoot":"","sources":["C:\\Projects\\success\\project_v.1.0.0\\src\\views\\documents\\income\\add.vue"],"sourcesContent":["<script>\r\nimport Layout from \"../../../layouts/main.vue\";\r\nimport PageHeader from \"@/components/page-header\";\r\nimport appConfig from \"../../../../app.config\";\r\nimport Select2 from 'vue3-select2-component';\r\n\r\nexport default {\r\n  \r\n  page: {\r\n    title: \"Basic Elements\",\r\n    meta: [{ name: \"description\", content: appConfig.description }],\r\n  },\r\n  data() {\r\n    return {\r\n      title: \"Добавление нового документа\",\r\n        Product:{\r\n        id: '',\r\n        name:\"\",\r\n        slug:\"\",\r\n        SKU:\"\",\r\n        short_description:\"\",\r\n        full_description:\"\",\r\n        Brand:{\r\n          id:-1,\r\n        },\r\n        sort:0,\r\n        },\r\n        Brands:[\r\n          {\r\n            id:-1,\r\n            text:\"\"\r\n          }\r\n        ],\r\n          jsonPages: {\r\n                currentpage: 1,\r\n                countsrecordonpage: 100\r\n      },\r\n       jsonFields: [{\r\n                name:'',\r\n                value: ''\r\n      }],\r\n        \r\n    };\r\n    \r\n  },\r\n  components: {\r\n    Layout,\r\n    PageHeader,\r\n    Select2\r\n  },\r\n    methods: {\r\n    addedProduct() {\r\n      var data = {\r\n        \"name\":this.Product.name,\r\n        \"slug\":this.Product.slug,\r\n        \"SKU\":this.Product.SKU,\r\n        \"short_description\":this.Product.short_description,\r\n        \"full_description\":this.Product.full_description,\r\n        \"Brand\": {\r\n          \"id\":parseInt(this.Product.Brand.id)\r\n          },\r\n        \"sort\":this.Product.sort,\r\n      };\r\n       console.log(data);\r\n      ProductDataService.create(data)\r\n        .then(response => {\r\n          this.Product.id = response.data.id;\r\n          console.log(response.data);\r\n          this.submitted = true;\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n        });\r\n    },\r\n    \r\n    newCompany() {\r\n      this.submitted = false;\r\n      this.Product = {};\r\n    },\r\n    retrieveBrands(){\r\n      this.jsonPages = {\r\n                currentpage:1,\r\n                countsrecordonpage: 1000\r\n            };\r\n         \r\n            if (this.search!=\"\"){\r\n            this.jsonFields = [{\r\n                field:\"name\",\r\n                value: this.search\r\n            }];\r\n            }else{\r\n                this.jsonFields = [];\r\n            }\r\n\r\n\r\n       BrandsDataService.getAll(this.jsonFields,[],this.jsonPages)\r\n        .then(response => {\r\n          \r\n          for(let i = 0; i < response.data.Brands.length; i++){\r\n              let currentBrand = response.data.Brands[i];\r\n         \r\n              this.Brands[i]={\r\n                id:currentBrand.Id, \r\n                text:currentBrand.Name\r\n              };\r\n              \r\n          }\r\n          //this.Brands = response.data.Brands;\r\n        \r\n          console.log(this.Brands);\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n        });\r\n    },\r\n     DynamicTable(GLOB, htmlTable, config) {    \r\n        // Так как эта функция является конструктором,\r\n        // подразумевается, что ключевое слово this - будет\r\n        // указывать на экземнпляр созданного объекта. Т.е. \r\n        // вызывать её нужно с оператором \"new\".\r\n        // Проверка ниже является страховкой: \r\n        // если эта функция была вызвана без оператора \"new\",\r\n        // то здесь эта досадная ситуация исправляется:\r\n        if ( !(this instanceof DynamicTable) ) {\r\n            return new DynamicTable(GLOB, htmlTable, config);   \r\n        }\r\n        // Зависимость:\r\n        var DOC       = GLOB.document,\r\n            // Ссылка на массив строк таблицы:\r\n            tableRows = htmlTable.rows,\r\n            // Кол-во строк таблицы:\r\n            RLength   = tableRows.length,\r\n            // Кол-во ячеек в таблице:\r\n            CLength   = tableRows[0].cells.length,\r\n            // Контейнер для работы в циклах ниже:\r\n            inElement = null,\r\n            // Контейнер кнопки\r\n            button    = null,\r\n            // Контейнер текстового узла кнопки\r\n            butText   = null,\r\n            // В одном из методов ниже, потребуется\r\n            // сохранить контекст:\r\n            self      = this,\r\n            // Счётчики итераций:\r\n            i,j;    \r\n                 \r\n        // Метод \"Вставить кнопки\". \r\n        // Создаёт/добавляет две кнопки \"удалить\" и \"добавить\"\r\n        // завёрнутые в элемент \"P\". Используются DOM - методы создания \r\n        // и добавления элементов.\r\n        this.insertButtons = function() {\r\n            // Создаём первую кнопку:\r\n            inElement = DOC.createElement(\"P\");\r\n            inElement.className = \"d-butts\";\r\n             \r\n            button = DOC.createElement(\"BUTTON\");                   \r\n            button.onclick = this.delRow;\r\n                                         \r\n            butText = DOC.createTextNode(\"-\");\r\n            button.appendChild(butText);    \r\n            // Добавляем её в DOM:      \r\n            inElement.appendChild(button);\r\n            // Создаём вторую кнопку:\r\n            button = DOC.createElement(\"BUTTON\");                   \r\n            button.onclick = this.addRow;\r\n                                         \r\n            butText = DOC.createTextNode(\"+\");\r\n            button.appendChild(butText);\r\n            // Добавляем её в DOM:      \r\n            inElement.appendChild(button);\r\n            // Обнуляем переменную, т.к. \r\n            // она используется и в других методах.\r\n            return inElement;\r\n        };\r\n        // Метод \"Добавить строку\"\r\n        this.addRow = function(ev) {\r\n            // Кросс бр. получаем событие и цель (кнопку)\r\n            var e         = ev||GLOB.event,\r\n                target    = e.target||e.srcElement,\r\n                // Получаем ссылку на строку, в которой была кнопка:\r\n                row       = target.parentNode.parentNode.parentNode,\r\n                // Получаем кол-во ячеек в строке:\r\n                cellCount = row.cells.length,\r\n                // Получаем индекс строки в которой была кнопка + 1,\r\n                // что бы добавить строку сразу после той, в которой\r\n                // была нажата кнопка:\r\n                index     = row.rowIndex + 1,\r\n                i;\r\n            // Вставляем строку:\r\n            htmlTable.insertRow(index);         \r\n            // В этом цикле, вставляем ячейки.\r\n            for(i=0; i < cellCount; i += 1) {    \r\n                         \r\n                htmlTable.rows[index].insertCell(i);                \r\n                // Если ячейка последняя...\r\n                if(i == cellCount-1) {\r\n                    // Получаем в переменную кнопки, используя метод, описанный выше:\r\n                    inElement = self.insertButtons();               \r\n                } else {            \r\n                    // Иначе получаем в переменную текстовое поле:      \r\n                    inElement = DOC.createElement(\"INPUT\");\r\n                    // ... и задаём ему имя, типа name[] - которое\r\n                    // впоследствии станет массивом.\r\n                    inElement.name  = config[i+1]+\"[]\";                 \r\n                }                   \r\n                // Добавляем в DOM, то что получили в переменную:\r\n                htmlTable.rows[index].cells[i].appendChild(inElement);                      \r\n            }\r\n            // Обнуляем переменную, т.к. \r\n            // она используется и в других методах.\r\n            inElement = null;\r\n            // Во избежании ненужных действий, при нажатии на кнопку\r\n            // возвращаем false:\r\n            return false;\r\n        };\r\n         \r\n        // Метод \"Удалить строку\"\r\n        // Удаляем строку, на  кнопку, которой нажали:\r\n        this.delRow = function(ev) {\r\n            // Страховка: не даёт удалить строку, если она осталась\r\n            // последней. Цифра 2 здесь потому, что мы считаем так же\r\n            // строку с заголовками TH. Итого получается, что 1 строка\r\n            // с заголовками и 1 строка - с содержимым.\r\n            if(tableRows.length > 2) {\r\n                htmlTable.deleteRow(this.parentNode.parentNode.parentNode.rowIndex);\r\n            } else {\r\n                return false;   \r\n            }           \r\n        };          \r\n         \r\n        // Фактически, ниже это инициализация таблицы:\r\n        // Содержимое ячеек помещается внутрь текстовых\r\n        // полей, а в последнюю ячейку кажой строки, помещаются\r\n        // нопки \"удалить\" и \"добавить\" Функция является\r\n        // \"вызываемой немедленно\"\r\n        return (function() {\r\n            // Мы имеем дело с двумерным массивом: \r\n            // table.rows[...].cells[...]\r\n            // Поэетому сдесь вложенный цикл.\r\n            // Внешний цикл \"шагает\" по строкам...\r\n            for( i = 1; i < RLength; i += 1 ) {  \r\n                // Внутренний цикл \"шагает\" по ячейкам: \r\n                for( j = 0; j < CLength; j += 1 ) { \r\n                    // Если ячейка последняя...\r\n                    if( j + 1 == CLength ) {\r\n                        // Помещаем в переменную кнопки:\r\n                        inElement = self.insertButtons();                                       \r\n                    } else {                    \r\n                        // Иначе создаем текстовый элемент,\r\n                        inElement = DOC.createElement(\"INPUT\");\r\n                        // Помещаем в него данные ячейки,\r\n                        inElement.value = tableRows[i].cells[j].firstChild.data;\r\n                        // Присваиваем имя - массив,\r\n                        inElement.name  = config[j+1]+\"[]\";\r\n                        // Удаляем, уже не нужный экземпляр данных непосредственно\r\n                        // из самой ячейки, потому что теперь данные у нас внутри\r\n                        // текстового поля:\r\n                        tableRows[i].cells[j].firstChild.data = \"\";\r\n                    }   \r\n                    // Вставляем в ячейку содержимое переменной - это\r\n                    // либо текстовое поле, либо кнопки: \r\n                    tableRows[i].cells[j].appendChild(inElement);\r\n                    // Обнуляем переменную, т.к. \r\n                    // она используется и в других методах.\r\n                    inElement = null;\r\n                }       \r\n            }\r\n       \r\n        }());\r\n     \r\n  },\r\n\r\n   mounted() {\r\n    this.retrieveBrands();\r\n  },\r\n    \r\n},\r\n}\r\n</script>\r\n\r\n<template>\r\n  <Layout>\r\n    <PageHeader :title=\"title\" :items=\"items\" />\r\n    \r\n      <div class=\"live-preview\">\r\n                            <form class=\"row g-3 needs-validation\" novalidate>\r\n                                <div class=\"col-md-4 position-relative\">\r\n                                <label for=\"exampleDataList\" class=\"form-label\">От кого</label>\r\n                                <Select2 />\r\n                            </div>\r\n\r\n\r\n\r\n                                <div class=\"col-md-4 position-relative\">\r\n                                    <label for=\"exampleDataList\" class=\"form-label\">Кому</label>\r\n                                    <Select2  />\r\n                                </div>\r\n\r\n\r\n\r\n                                <div class=\"col-md-4\">\r\n                                    <label  class=\"form-label\">Тип документа</label>\r\n                                    <Select2  />\r\n                                </div>\r\n\r\n\r\n\r\n                                <div class=\"col-md-6 position-relative\">\r\n                                    <label for=\"validationTooltip03\" class=\"form-label\">Коментарий</label>\r\n                                    <input type=\"text\" class=\"form-control\" id=\"validationTooltip03\" required>\r\n                                   \r\n                                </div>\r\n\r\n                               \r\n\r\n                            <div class=\"col-xxl-3 col-md-6\">\r\n                                    <div>\r\n                                        <label for=\"exampleInputdate\" class=\"form-label\">Дата исполнения</label>\r\n                                        <input type=\"date\" class=\"form-control\" id=\"exampleInputdate\">\r\n                                    </div>\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                              \r\n<p>\r\n \r\n    </p>\r\n\r\n <div>\r\n\r\n   <table class=\"table table-primary table-striped align-middle table-nowrap mb-0\">\r\n    <thead>\r\n        <tr>\r\n            <th scope=\"col\">Product</th>\r\n            <th scope=\"col\">Quantity</th>\r\n            <th scope=\"col\">Price</th>\r\n            <th scope=\"col\"> GTD</th>\r\n            <th scope=\"col\">Warehouse_cell</th>\r\n            <th scope=\"col\"></th>\r\n             <th scope=\"col\">&nbsp;</th>\r\n            \r\n            \r\n        \r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr v-for=\"(Product, index) in Products\" :key=\"index\">\r\n    \r\n           \r\n            <td><input type=\"text\"></td>\r\n            <td><input type=\"text\"></td>\r\n            <td><input type=\"text\"></td>\r\n            <td><input type=\"text\"></td>\r\n            <td><input type=\"text\"></td>\r\n            <td><input type=\"text\"></td>\r\n            <td>&nbsp;</td>\r\n            <td>\r\n\r\n\r\n\r\n                <div class=\"hstack gap-3 flex-wrap\">\r\n                   <router-link :to=\"{name: 'ProductEdit', params: { id: Product.Id }}\"> <a href=\"javascript:void(0);\" class=\"link-primary fs-15\"><i class=\"ri-edit-2-line\"></i></a></router-link>\r\n                    <a href=\"javascript:void(0);\" class=\"link-danger fs-15\"><i class=\"ri-delete-bin-line\" @click=\"deleteProduct(Product.Id)\"></i></a>\r\n                    <a href=\"javascript:void(0);\" class=\"link-success fs-15\"><i class=\" ri-profile-line\" @click=\"deleteProduct(Product.Id)\"></i></a>\r\n                </div>\r\n\r\n\r\n            </td>\r\n\r\n\r\n\r\n        </tr>\r\n\r\n\r\n       \r\n    </tbody>\r\n\r\n\r\n\r\n    <p></p>\r\n\r\n\r\n\r\n</table>\r\n\r\n\r\n </div>\r\n\r\n    <p>\r\n \r\n    </p>\r\n  \r\n    <div class=\"col-12\">\r\n                                    <button class=\"btn btn-success\" type=\"button\">Added</button>\r\n                                </div>\r\n\r\n\r\n                                    <div class=\"col-12\">\r\n                                    <button class=\"btn btn-success\" type=\"button\">add string</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n    </Layout>\r\n</template>\r\n"]},"metadata":{},"sourceType":"module"}