{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport { getFirebaseBackend } from '../../authUtils.js';\nexport var state = {\n  currentUser: sessionStorage.getItem('authUser')\n};\nexport var mutations = {\n  SET_CURRENT_USER: function SET_CURRENT_USER(state, newValue) {\n    state.currentUser = newValue;\n    saveState('auth.currentUser', newValue);\n  }\n};\nexport var getters = {\n  // Whether the user is currently logged in.\n  loggedIn: function loggedIn(state) {\n    return !!state.currentUser;\n  }\n};\nexport var actions = {\n  // This is automatically run in `src/state/store.js` when the app\n  // starts, along with any other actions named `init` in other modules.\n  // eslint-disable-next-line no-unused-vars\n  init: function init(_ref) {\n    var state = _ref.state,\n        dispatch = _ref.dispatch;\n    dispatch('validate');\n  },\n  // Logs in the current user.\n  logIn: function logIn(_ref2) {\n    var commit = _ref2.commit,\n        dispatch = _ref2.dispatch,\n        getters = _ref2.getters;\n\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        email = _ref3.email,\n        password = _ref3.password;\n\n    if (getters.loggedIn) return dispatch('validate');\n    return getFirebaseBackend().loginUser(email, password).then(function (response) {\n      var user = response;\n      commit('SET_CURRENT_USER', user);\n      return user;\n    });\n  },\n  // Logs out the current user.\n  logOut: function logOut(_ref4) {\n    var _this = this;\n\n    var commit = _ref4.commit;\n    // eslint-disable-next-line no-unused-vars\n    commit('SET_CURRENT_USER', null);\n    return new Promise(function (resolve, reject) {\n      // eslint-disable-next-line no-unused-vars\n      getFirebaseBackend().logout().then(function (response) {\n        resolve(true);\n      }).catch(function (error) {\n        reject(_this._handleError(error));\n      });\n    });\n  },\n  // register the user\n  register: function register(_ref5) {\n    var commit = _ref5.commit,\n        dispatch = _ref5.dispatch,\n        getters = _ref5.getters;\n\n    var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        username = _ref6.username,\n        email = _ref6.email,\n        password = _ref6.password;\n\n    if (getters.loggedIn) return dispatch('validate');\n    return getFirebaseBackend().registerUser(username, email, password).then(function (response) {\n      var user = response;\n      commit('SET_CURRENT_USER', user);\n      return user;\n    });\n  },\n  // register the user\n  // eslint-disable-next-line no-unused-vars\n  resetPassword: function resetPassword(_ref7) {\n    var commit = _ref7.commit,\n        dispatch = _ref7.dispatch,\n        getters = _ref7.getters;\n\n    var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        email = _ref8.email;\n\n    if (getters.loggedIn) return dispatch('validate');\n    return getFirebaseBackend().forgetPassword(email).then(function (response) {\n      var message = response.data;\n      return message;\n    });\n  },\n  // Validates the current user's token and refreshes it\n  // with new data from the API.\n  // eslint-disable-next-line no-unused-vars\n  validate: function validate(_ref9) {\n    var commit = _ref9.commit,\n        state = _ref9.state;\n    if (!state.currentUser) return Promise.resolve(null);\n    var user = getFirebaseBackend().getAuthenticatedUser();\n    commit('SET_CURRENT_USER', user);\n    return user;\n  }\n}; // ===\n// Private helpers\n// ===\n\nfunction saveState(key, state) {\n  window.sessionStorage.setItem(key, JSON.stringify(state));\n}","map":{"version":3,"sources":["C:/Projects/success/project_v.1.0.0/src/state/modules/auth.js"],"names":["getFirebaseBackend","state","currentUser","sessionStorage","getItem","mutations","SET_CURRENT_USER","newValue","saveState","getters","loggedIn","actions","init","dispatch","logIn","commit","email","password","loginUser","then","response","user","logOut","Promise","resolve","reject","logout","catch","error","_handleError","register","username","registerUser","resetPassword","forgetPassword","message","data","validate","getAuthenticatedUser","key","window","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { getFirebaseBackend } from '../../authUtils.js'\r\n\r\nexport const state = {\r\n    currentUser: sessionStorage.getItem('authUser'),\r\n}\r\n\r\nexport const mutations = {\r\n    SET_CURRENT_USER(state, newValue) {\r\n        state.currentUser = newValue\r\n        saveState('auth.currentUser', newValue)\r\n    }\r\n}\r\n\r\nexport const getters = {\r\n    // Whether the user is currently logged in.\r\n    loggedIn(state) {\r\n        return !!state.currentUser\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    // This is automatically run in `src/state/store.js` when the app\r\n    // starts, along with any other actions named `init` in other modules.\r\n    // eslint-disable-next-line no-unused-vars\r\n    init({ state, dispatch }) {\r\n        dispatch('validate')\r\n    },\r\n\r\n    // Logs in the current user.\r\n    logIn({ commit, dispatch, getters }, { email, password } = {}) {\r\n        if (getters.loggedIn) return dispatch('validate')\r\n\r\n        return getFirebaseBackend().loginUser(email, password).then((response) => {\r\n            const user = response\r\n            commit('SET_CURRENT_USER', user)\r\n            return user\r\n        });\r\n    },\r\n\r\n    // Logs out the current user.\r\n    logOut({ commit }) {\r\n        // eslint-disable-next-line no-unused-vars\r\n        commit('SET_CURRENT_USER', null)\r\n        return new Promise((resolve, reject) => {\r\n            // eslint-disable-next-line no-unused-vars\r\n            getFirebaseBackend().logout().then((response) => {\r\n                resolve(true);\r\n            }).catch((error) => {\r\n                reject(this._handleError(error));\r\n            })\r\n        });\r\n    },\r\n\r\n    // register the user\r\n    register({ commit, dispatch, getters }, { username, email, password } = {}) {\r\n        if (getters.loggedIn) return dispatch('validate')\r\n\r\n        return getFirebaseBackend().registerUser(username, email, password).then((response) => {\r\n            const user = response\r\n            commit('SET_CURRENT_USER', user)\r\n            return user\r\n        });\r\n    },\r\n\r\n    // register the user\r\n    // eslint-disable-next-line no-unused-vars\r\n    resetPassword({ commit, dispatch, getters }, { email } = {}) {\r\n        if (getters.loggedIn) return dispatch('validate')\r\n\r\n        return getFirebaseBackend().forgetPassword(email).then((response) => {\r\n            const message = response.data\r\n            return message\r\n        });\r\n    },\r\n\r\n    // Validates the current user's token and refreshes it\r\n    // with new data from the API.\r\n    // eslint-disable-next-line no-unused-vars\r\n    validate({ commit, state }) {\r\n        if (!state.currentUser) return Promise.resolve(null)\r\n        const user = getFirebaseBackend().getAuthenticatedUser();\r\n        commit('SET_CURRENT_USER', user)\r\n        return user;\r\n    },\r\n}\r\n\r\n// ===\r\n// Private helpers\r\n// ===\r\n\r\nfunction saveState(key, state) {\r\n    window.sessionStorage.setItem(key, JSON.stringify(state))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}