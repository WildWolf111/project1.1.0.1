{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport Layout from \"../../layouts/main.vue\";\nimport PageHeader from \"@/components/page-header\";\nimport appConfig from \"../../../app.config\";\nimport ProductsDataService from \"/src/services/ProductsDataService\";\nimport BrandsDataService from \"/src/services/BrandsDataService\";\nimport Select2 from 'vue3-select2-component';\nexport default {\n  page: {\n    title: \"Basic Elements\",\n    meta: [{\n      name: \"description\",\n      content: appConfig.description\n    }]\n  },\n  data: function data() {\n    return {\n      currentProduct: {\n        Id: -1,\n        Name: \"\",\n        Slug: \"\",\n        SKU: \"\",\n        short_description: \"\",\n        full_description: \"\",\n        Brand: {\n          Id: -1\n        }\n      },\n      message: '',\n      Brands: [{\n        id: -1,\n        text: \"\"\n      }],\n      selectBrand: {\n        id: -1,\n        text: \"\"\n      }\n    };\n  },\n  components: {\n    Layout: Layout,\n    PageHeader: PageHeader,\n    Select2: Select2\n  },\n  methods: {\n    getProduct: function getProduct(id) {\n      var _this = this;\n\n      ProductsDataService.get(id).then(function (response) {\n        console.log(response.data);\n\n        if (response.status == 200) {\n          _this.currentProduct = response.data;\n        } else {\n          _this.$router.push({\n            path: \"/products\"\n          });\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    updateProduct: function updateProduct() {\n      var _this2 = this;\n\n      this.currentProduct.Brand.Id = parseInt(this.currentProduct.Brand.Id);\n      ProductsDataService.update(this.currentProduct.Id, this.currentProduct).then(function (response) {\n        _this2.message = 'The Product was updated successfully!';\n\n        if (response.data.status_code == 200) {\n          _this2.$router.push({\n            path: \"/products\"\n          });\n        } else {\n          return response.data.message;\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    deleteProduct: function deleteProduct() {\n      var _this3 = this;\n\n      ProductsDataService.delete(this.currentProduct.Id).then(function (response) {\n        _this3.$router.push({\n          name: \"product\"\n        });\n\n        if (response.status == 202) {\n          _this3.$router.push({\n            path: \"/products\"\n          });\n        } else {\n          return response.data.message;\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    retrieveBrands: function retrieveBrands() {\n      var _this4 = this;\n\n      this.jsonPages = {\n        PageNumber: 1,\n        TotalRecords: 100\n      };\n\n      if (this.search != \"\") {\n        this.jsonFields = [{\n          field: \"name\",\n          value: this.search\n        }];\n      } else {\n        this.jsonFields = [];\n      }\n\n      BrandsDataService.getAll(this.jsonFields, [], this.jsonPages).then(function (response) {\n        console.log(response.data);\n\n        for (var i = 0; i < response.data.Brands.length; i++) {\n          console.log(response.data.Brands);\n          var currentBrand = response.data.Brands[i];\n\n          if (currentBrand.Id == _this4.currentProduct.Brand.Id) {\n            _this4.selectBrand.id = currentBrand.Id;\n            _this4.selectBrand.text = currentBrand.Name;\n          }\n\n          _this4.Brands[i] = {\n            id: currentBrand.Id,\n            text: currentBrand.Name\n          };\n        } //this.Brands = response.data.Brands;\n\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    mySelectEvent: function mySelectEvent(_ref) {\n      var id = _ref.id,\n          text = _ref.text;\n      this.currentProduct.Brand.Id = id;\n      this.currentProduct.Brand.Name = text;\n    }\n  },\n  mounted: function mounted() {\n    this.message = '';\n    this.getProduct(this.$route.params.id);\n    this.retrieveBrands();\n  }\n};","map":{"version":3,"mappings":"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","names":["Layout","PageHeader","appConfig","ProductsDataService","BrandsDataService","Select2","page","title","meta","name","content","description","data","currentProduct","Id","Name","Slug","SKU","short_description","full_description","Brand","message","Brands","id","text","selectBrand","components","methods","getProduct","get","then","console","log","response","status","$router","push","path","catch","e","updateProduct","parseInt","update","status_code","deleteProduct","delete","retrieveBrands","jsonPages","PageNumber","TotalRecords","search","jsonFields","field","value","getAll","i","length","currentBrand","mySelectEvent","mounted","$route","params"],"sourceRoot":"","sources":["C:\\Projects\\success\\project_v.1.0.0\\src\\views\\products\\edit.vue"],"sourcesContent":["<script>\nimport Layout from \"../../layouts/main.vue\";\nimport PageHeader from \"@/components/page-header\";\nimport appConfig from \"../../../app.config\";\nimport ProductsDataService from \"/src/services/ProductsDataService\";\nimport BrandsDataService from \"/src/services/BrandsDataService\";\nimport Select2 from 'vue3-select2-component';\n\nexport default {\n  \n  page: {\n    title: \"Basic Elements\",\n    meta: [{ name: \"description\", content: appConfig.description }],\n  },\n  data() {\n   return {\n      currentProduct:{\n          Id:-1,\n          Name:\"\",\n          Slug:\"\",\n          SKU:\"\",\n          short_description:\"\",\n          full_description:\"\",\n          Brand:{\n            Id:-1,\n          },\n      },\n      message: '',\n        Brands:[\n          {\n            id:-1,\n            text:\"\"\n          }\n        ],\n        selectBrand:\n          {\n            id:-1,\n            text:\"\"\n          }\n        ,\n    };\n    \n  },\n  components: {\n    Layout,\n    PageHeader,\n    Select2\n  },\n    methods: {\n    getProduct(id) {\n       \n       ProductsDataService.get(id)\n        .then(response => {\n         \n            console.log(response.data)\n            if (response.status == 200){\n              this.currentProduct = response.data;\n            }else{\n              this.$router.push({path: \"/products\"});\n              \n            }\n          \n        })\n        .catch(e => {\n          console.log(e);\n        });\n    },\n\n    updateProduct() {\n        \n        this.currentProduct.Brand.Id = parseInt(this.currentProduct.Brand.Id);\n       ProductsDataService.update(this.currentProduct.Id, this.currentProduct)\n       \n        .then(response => {\n         \n          this.message = 'The Product was updated successfully!';\n        if (response.data.status_code == 200){\n        this.$router.push({path: \"/products\"})}\n        else{\n        return response.data.message}\n        })\n        \n        .catch(e => {\n          console.log(e);\n        });\n        \n    },\n\n    deleteProduct() {\n      \n      ProductsDataService.delete(this.currentProduct.Id)\n        .then(response => {\n         \n          this.$router.push({ name: \"product\" });\n        if (response.status == 202){\n        this.$router.push({path: \"/products\"})}\n        else{\n        return response.data.message}\n        \n        })\n        .catch(e => {\n          console.log(e);\n        });\n        \n    },\n    \n       retrieveBrands(){\n        \n      this. jsonPages = {\n                PageNumber: 1,\n                TotalRecords: 100\n      };\n         \n            if (this.search!=\"\"){\n            this.jsonFields = [{\n                field:\"name\",\n                value: this.search\n            }];\n            }else{\n                this.jsonFields = [];\n            }\n\n\n       BrandsDataService.getAll(this.jsonFields,[],this.jsonPages)\n        .then(response => {\n          console.log(response.data);\n          for(let i = 0; i < response.data.Brands.length; i++){\n            console.log(response.data.Brands)\n              let currentBrand = response.data.Brands[i];\n            if (currentBrand.Id == this.currentProduct.Brand.Id){\n                this.selectBrand.id = currentBrand.Id;\n                this.selectBrand.text = currentBrand.Name;\n            }\n              this.Brands[i]={\n                id:currentBrand.Id, \n                text:currentBrand.Name\n              };\n              \n          }\n          //this.Brands = response.data.Brands;\n        \n         \n        })\n        .catch(e => {\n          console.log(e);\n        });\n    },\n     mySelectEvent({id, text}){\n            this.currentProduct.Brand.Id = id;\n            this.currentProduct.Brand.Name = text;\n     }\n  },\n  mounted() {\n    this.message = '';\n    \n    this.getProduct(this.$route.params.id);\n     this.retrieveBrands();\n     \n    \n  }\n\n    \n};\n</script>\n\n<template>\n  <Layout>\n    <PageHeader :title=\"title\" :items=\"items\" />\n    \n     <div class=\"row\">\n          <div>\n              <label for=\"labelInput\" class=\"form-label\">{{ $t(\"t-name\") }}</label>\n             <input type=\"text\" class=\"form-control\" id=\"labelInput\" required  v-model=\"currentProduct.Name\" >\n          </div>                     \n     </div> \n\n      <div class=\"row\">\n          <div>\n              <label for=\"labelInput\" class=\"form-label\">   {{ $t(\"t-slug\") }}</label>\n              <input type=\"text\" class=\"form-control\" id=\"labelInput\" required v-model=\"currentProduct.Slug\" >\n          </div>                     \n     </div>\n        <div class=\"row\">\n          <div>\n              <label for=\"labelInput\" class=\"form-label\">   {{ $t(\"t-SKU\") }}</label>\n              <input type=\"Text\" class=\"form-control\" id=\"labelInput\" required v-model=\"currentProduct.SKU\" >\n          </div>                     \n     </div>\n           <div class=\"row\">\n          <div>\n              <label for=\"labelInput\" class=\"form-label\"> {{ $t(\"t-short_description\") }}</label>\n             <input type=\"Text\" class=\"form-control\" id=\"labelInput\" required v-model=\"currentProduct.short_description\" >\n          </div>                     \n     </div>  \n\n <div class=\"row\">\n          <div>\n              <label for=\"labelInput\" class=\"form-label\">  {{ $t(\"t-full_description\") }}</label>\n              <input type=\"Text\" class=\"form-control\" id=\"labelInput\" required v-model=\"currentProduct.full_description\" >\n          </div>                     \n  </div>\n\n<div class=\"col-xxl-3 col-md-6\">\n    <label for=\"exampleDataList\" class=\"form-label\">{{ $t(\"t-brands\") }}</label>\n    <Select2 v-model=\"currentProduct.Brand.Id\" :options=\"this.Brands\" @select=\"mySelectEvent($event)\"/>\n</div>\n\n      \n<p>\n \n    </p>\n  \n    \n            <div class=\"row\">\n                <div>\n                    <b-button @click=\"updateProduct\" variant=\"success\" class=\"waves-effect waves-light\" >{{ $t(\"t-Save\") }}</b-button> \n                              \n                </div> \n            </div>\n\n\n\n\n    </Layout>\n</template>\n"]},"metadata":{},"sourceType":"module"}